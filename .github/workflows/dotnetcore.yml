name: .NET Core

on: [push, pull_request]
jobs:
  build:

    runs-on: windows-2019

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.101
    - name: Build with dotnet
      run: dotnet build --configuration Release
    - name: Test with dotnet
      run: dotnet test -c Debug SharpFileSystem.Tests/SharpFileSystem.Tests.csproj
    - name: push
      id: publish_nuget
      uses: brandedoutcast/publish-nuget@v2.5.2
      with:
          VERSION_REGEX: <version>(.*)<\/version>
          PROJECT_FILE_PATH: SharpCoreFileSystem/SharpCoreFileSystem.csproj
          NUGET_KEY: ${{ secrets.NUGET_KEY }}
          VERSION_FILE_PATH: SharpCoreFileSystem/SharpCoreFileSystem.csproj
    - name: Create Release
      if: ${{ success() && steps.publish_nuget.outputs.VERSION != ''  && steps.publish_nuget.outputs.VERSION != null }}
      id: create_release
      uses: actions/create-release@latest
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.publish_nuget.outputs.VERSION }}
        release_name: Release ${{ steps.publish_nuget.outputs.VERSION }}
        draft: false
        prerelease: false
    - name: Upload Release Asset
      if: ${{ success() && steps.create_release.outputs.upload_url != ''  && steps.create_release.outputs.upload_url != null }}
      id: upload-release-asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ${{ steps.publish_nuget.outputs.PACKAGE_PATH }}
        asset_name: ${{ steps.publish_nuget.outputs.PACKAGE_NAME }}
        asset_content_type: application/zip
